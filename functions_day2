{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.interpolate import interp1d\n",
        "import matplotlib.pyplot as plt\n",
        "from statsmodels.distributions.empirical_distribution import ECDF\n",
        "\n",
        "def approx_ks_d(n):\n",
        "    \"\"\"\n",
        "    Approximations for the critical level for Kolmogorov-Smirnov\n",
        "    statistic D, for confidence level 0.95.\n",
        "    Taken from Bickel & Doksum, table IX, p.483\n",
        "    and Lienert G.A.(1975) who attributes to Miller,L.H.(1956), JASA\n",
        "    \"\"\"\n",
        "    if n > 80:\n",
        "        return 1.358 / (np.sqrt(n) + 0.12 + 0.11 / np.sqrt(n))\n",
        "    else:\n",
        "        x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50, 60, 70, 80]\n",
        "        y = [0.975, 0.84189, 0.7076, 0.62394, 0.56328, 0.51926, 0.48342, 0.45427, 0.43001, 0.40925, 0.3376, 0.29408, 0.2417, 0.21012, 0.18841, 0.17231, 0.15975, 0.14960]\n",
        "        interp_func = interp1d(x, y, kind='cubic')\n",
        "        return interp_func(n)\n",
        "\n",
        "def ecdf_ks_ci(x, main=None, sub=None, xlab=None, **kwargs):\n",
        "    \"\"\"\n",
        "    Empirical cumulative distribution function (ECDF) with 95% Kolmogorov-Smirnov confidence bands.\n",
        "\n",
        "    Parameters:\n",
        "    x (array-like): Input data.\n",
        "    main (str, optional): Main title for the plot.\n",
        "    sub (str, optional): Subtitle for the plot.\n",
        "    xlab (str, optional): Label for the x-axis.\n",
        "    **kwargs: Additional arguments passed to the plot function.\n",
        "\n",
        "    Returns:\n",
        "    dict: A dictionary containing the lower and upper confidence bands.\n",
        "    \"\"\"\n",
        "    n = len(x)\n",
        "\n",
        "    if main is None:\n",
        "        main = f\"ESDF + 95% K.S.bands\"\n",
        "    if sub is None:\n",
        "        sub = f\"n = {n}\"\n",
        "\n",
        "    x_sorted = np.sort(x)\n",
        "    y = np.arange(1, n + 1) / n\n",
        "\n",
        "    d = approx_ks_d(n)\n",
        "\n",
        "    y_upper = np.minimum(y + d, 1)\n",
        "    y_lower = np.maximum(y - d, 0)\n",
        "\n",
        "    F_X = ECDF(x_sorted)\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.step(x_sorted, F_X(x_sorted), label=\"ECDF\", **kwargs)\n",
        "    plt.step(x_sorted, y_upper, 'r--', label=\"Upper 95% K.S. band\", **kwargs)\n",
        "    plt.step(x_sorted, y_lower, 'r--', label=\"Lower 95% K.S. band\", **kwargs)\n",
        "    plt.suptitle(main)\n",
        "    plt.title(sub)\n",
        "    plt.xlabel(xlab)\n",
        "    plt.ylabel(\"Cumulative Probability\")\n",
        "    plt.legend()\n",
        "    plt.grid()\n",
        "    plt.show()\n",
        "\n",
        "    return {\n",
        "        \"lower\": y_lower,\n",
        "        \"upper\": y_upper\n",
        "    }"
      ],
      "metadata": {
        "id": "n0X9xQmgU_Zp"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ecdf_ks_ci([42, 43, 51, 61, 66, 69, 71, 81, 82, 82])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        },
        "id": "svUMPWuPW9P1",
        "outputId": "967d7fd4-d58b-457a-bbe6-8c73c968d9cc"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'lower': array([0.     , 0.     , 0.     , 0.     , 0.09075, 0.19075, 0.29075,\n",
              "        0.39075, 0.49075, 0.59075]),\n",
              " 'upper': array([0.50925, 0.60925, 0.70925, 0.80925, 0.90925, 1.     , 1.     ,\n",
              "        1.     , 1.     , 1.     ])}"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import norm, rankdata, kendalltau\n",
        "\n",
        "def kendall_ci(x=None, y=None, alpha=0.05, type=\"t\", bootstrap=False, B=1000, example=False):\n",
        "    \"\"\"\n",
        "    This will produce a 1 - alpha CI for Kendall's tau.\n",
        "    Based on sections 8.3 and 8.4 of:\n",
        "    Nonparametric Statistical Methods, 3e\n",
        "    Hollander, Wolfe & Chicken\n",
        "\n",
        "    Parameters:\n",
        "    x (array-like): x sample\n",
        "    y (array-like): y sample\n",
        "    alpha (float): significance level (default: 0.05)\n",
        "    type (str): CI type, can be \"t\" (two-sided), \"l\" (lower) or \"u\" (upper) (default: \"t\")\n",
        "    bootstrap (bool): whether to use bootstrap CI (default: False)\n",
        "    B (int): number of bootstrap replicates (default: 1000)\n",
        "    example (bool): whether to use the example data from HW&C (default: False)\n",
        "\n",
        "    Returns:\n",
        "    None\n",
        "    \"\"\"\n",
        "    # Example 8.1 from HW&C\n",
        "    if example:\n",
        "        x = [44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1]\n",
        "        y = [2.6, 3.1, 2.5, 5.0, 3.6, 4.0, 5.2, 2.8, 3.8]\n",
        "\n",
        "    continue_flag = True\n",
        "\n",
        "    if x is None or y is None:\n",
        "        print(\"\\nYou must supply an x sample and a y sample!\\n\")\n",
        "        continue_flag = False\n",
        "\n",
        "    if continue_flag and len(x) != len(y):\n",
        "        print(\"\\nSamples must be of the same length!\\n\")\n",
        "        continue_flag = False\n",
        "\n",
        "    if continue_flag and len(x) <= 1:\n",
        "        print(\"\\nSample size n must be at least two!\\n\")\n",
        "        continue_flag = False\n",
        "\n",
        "    if continue_flag and type not in [\"t\", \"l\", \"u\"]:\n",
        "        print(\"\\nArgument \\\"type\\\" must be one of \\\"t\\\" (two-sided), \\\"l\\\" (lower) or \\\"u\\\" (upper)!\\n\")\n",
        "        continue_flag = False\n",
        "\n",
        "    if continue_flag:\n",
        "        # Q* from (8.17)\n",
        "        def Q(i, j):\n",
        "            ij = (j[1] - i[1]) * (j[0] - i[0])\n",
        "            if ij > 0:\n",
        "                return 1\n",
        "            elif ij < 0:\n",
        "                return -1\n",
        "            else:\n",
        "                return 0\n",
        "\n",
        "        # C.i from (8.37)\n",
        "        def C_i(x, y, i):\n",
        "            c_i = 0\n",
        "            for k in range(len(x)):\n",
        "                if k != i:\n",
        "                    c_i += Q([x[i], y[i]], [x[k], y[k]])\n",
        "            return c_i\n",
        "\n",
        "        if not bootstrap:\n",
        "            c_i = [C_i(x, y, i) for i in range(len(x))]\n",
        "            tau_hat = kendalltau(x, y).statistic\n",
        "            sigma_hat_2 = 2 * (len(x) - 2) * np.var(c_i) * len(c_i) / (len(c_i) - 1) / (len(x) * (len(x) - 1))\n",
        "            sigma_hat_2 += 1 - tau_hat ** 2\n",
        "            sigma_hat_2 *= 2 / (len(x) * (len(x) - 1))\n",
        "\n",
        "            if type == \"t\":\n",
        "                z = norm.ppf(1 - alpha / 2)\n",
        "            else:\n",
        "                z = norm.ppf(1 - alpha)\n",
        "\n",
        "            tau_L = tau_hat - z * np.sqrt(sigma_hat_2)\n",
        "            tau_U = tau_hat + z * np.sqrt(sigma_hat_2)\n",
        "\n",
        "            if type == \"l\":\n",
        "                tau_U = 1\n",
        "            elif type == \"u\":\n",
        "                tau_L = -1\n",
        "\n",
        "        if bootstrap:\n",
        "              tau = []\n",
        "              for b in range(B):\n",
        "                  b_sample = np.random.choice(np.arange(0, len(x), 1), len(x))\n",
        "                  tau_sample = kendalltau(np.array(x)[b_sample], np.array(y)[b_sample]).statistic\n",
        "                  tau.append(tau_sample)\n",
        "\n",
        "              tau = sorted(tau)\n",
        "              if type == \"t\":\n",
        "                  k = int(np.floor((B + 1) * alpha / 2))\n",
        "              else:\n",
        "                  k = int(np.floor((B + 1) * alpha))\n",
        "\n",
        "              tau_L = tau[k]\n",
        "              tau_U = tau[B + 1 - k]\n",
        "\n",
        "              if type == \"l\":\n",
        "                  tau_U = 1\n",
        "              elif type == \"u\":\n",
        "                  tau_L = -1\n",
        "\n",
        "        tau_L = round(tau_L, 3)\n",
        "        tau_U = round(tau_U, 3)\n",
        "\n",
        "        if type == \"t\":\n",
        "            print_type = \" two-sided CI for tau:\"\n",
        "        elif type == \"l\":\n",
        "            print_type = \" lower bound for tau:\"\n",
        "        else:\n",
        "            print_type = \" upper bound for tau:\"\n",
        "\n",
        "        print(f\"\\n1 - alpha = {1 - alpha}{print_type}\")\n",
        "        print(f\"{tau_L}, {tau_U}\\n\")"
      ],
      "metadata": {
        "id": "OrZnK8IeYx1h"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "kendall_ci(example=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6_Ryx66gky5C",
        "outputId": "8becc479-2fd5-46c2-96d0-9314c6e681f4"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 - alpha = 0.95 two-sided CI for tau:\n",
            "-0.053, 0.941\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "from scipy.special import binom\n",
        "from scipy.stats import norm, expon\n",
        "\n",
        "def kolmogorov(x, fnc=norm.cdf, **kwargs):\n",
        "    def find_kol(d, n):\n",
        "        sum_val = 0\n",
        "        sum_max = int(n * (1 - d))\n",
        "        for j in range(sum_max + 1):\n",
        "            prod_1 = binom(n, j)\n",
        "            prod_2 = (1 - d - (j / n)) ** (n - j)\n",
        "            prod_3 = (d + (j / n)) ** (j - 1)\n",
        "            sum_val += prod_1 * prod_2 * prod_3\n",
        "        return 2 * d * sum_val\n",
        "\n",
        "    def f_n(data, x):\n",
        "        # F_{n}(x) returns # of X's in the sample(data) <= x / n\n",
        "        return len(data[data <= x]) / len(data)\n",
        "\n",
        "    x = sorted(x)\n",
        "    x_unique = sorted(set(x))\n",
        "\n",
        "    if len(x_unique) == len(x):  # there are no ties\n",
        "        D = 0\n",
        "        n = len(x)\n",
        "        f_0 = fnc(x, **kwargs)\n",
        "        for i in range(n):\n",
        "            D = max(D, abs(((i+1) / n) - f_0[i]), abs(((i) / n) - f_0[i]))\n",
        "    else:\n",
        "        # there are ties\n",
        "        fn = []\n",
        "        f_0 = fnc(x_unique, **kwargs)\n",
        "        for j in x_unique:\n",
        "            fn.append(f_n(x, j))\n",
        "        D = abs(fn[0] - f_0[0])  # i=1\n",
        "        for i in range(1, len(x_unique)):\n",
        "            D = max(D, abs(fn[i] - f_0[i]), abs(fn[i - 1] - f_0[i]))\n",
        "\n",
        "    p = find_kol(D, n)\n",
        "    print(f\"D= {D}\\np= {p}\")\n",
        "    return {\"D\": D, \"p\": p}"
      ],
      "metadata": {
        "id": "0jdsvMN1k3sE"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "velocity = [12.8, 12.9, 13.3, 13.4, 13.7, 13.8, 14.5]\n",
        "print(kolmogorov(velocity, norm.cdf, loc=14, scale=2))\n",
        "print('--------------------------------------------')\n",
        "kolmogorov(velocity, norm.cdf, loc=3, scale=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rp2YH5uqzS1Q",
        "outputId": "8c270dbc-29bc-4e40-9f3f-ef4c4a36f75c"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "D= 0.4012936743170763\n",
            "p= 0.15707202551757168\n",
            "{'D': 0.4012936743170763, 'p': 0.15707202551757168}\n",
            "--------------------------------------------\n",
            "D= 0.5390338533156216\n",
            "p= 0.01979083281855919\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'D': 0.5390338533156216, 'p': 0.01979083281855919}"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def mrl(data, alpha, main=None, ylim=None, xlab=None, **kwargs):\n",
        "    # arguments:\n",
        "    # data is a vector of survival times in any order\n",
        "    # (1-alpha) is the approximate coverage probability for the confidence band\n",
        "\n",
        "    n = len(data)\n",
        "    data = sorted(data)\n",
        "    S = np.zeros(n)\n",
        "    M = np.zeros(n)\n",
        "    Fem = np.zeros(n)\n",
        "    quant = np.zeros(n)\n",
        "    a = np.zeros(n)\n",
        "    MU = np.zeros(n)\n",
        "    ML = np.zeros(n)\n",
        "    PM = np.zeros(2*n)\n",
        "    PMU = np.zeros(2*n)\n",
        "    PML = np.zeros(2*n)\n",
        "\n",
        "    # calculation of S(x), M(x), and the empirical dsn at the survival times\n",
        "    S[0] = n\n",
        "    M[0] = np.mean(data)\n",
        "    Fem[0] = 1\n",
        "    for i in range(1, n):\n",
        "        S[i] = n - i\n",
        "        M[i] = (sum(data[i:]) / (n - i)) - data[i-1]\n",
        "        Fem[i] = (n - i) / n\n",
        "\n",
        "    # Table of critical values for Hall-Wellner confidence band.\n",
        "    quant = np.array([0.01, 0.05, 0.1, 0.25, 0.5, 0.75])\n",
        "    a = np.array([2.807, 2.241, 1.96, 1.534, 1.149, 0.871])\n",
        "\n",
        "    aalpha = a[np.where(quant == alpha)[0][0]]\n",
        "\n",
        "    Dn = (aalpha * (np.var(data) * len(data) / (len(data) - 1)) ** 0.5) / (n ** 0.5)\n",
        "\n",
        "    # calculation of the bands ML and MU\n",
        "    for i in range(n):\n",
        "        ML[i] = M[i] - (Dn / Fem[i])\n",
        "        MU[i] = M[i] + (Dn / Fem[i])\n",
        "\n",
        "    # calculation of PM(x), PMU(x), PML(x) for plotting.\n",
        "    PM[0] = M[0]\n",
        "    PM[1] = M[0] - data[0]\n",
        "    PMU[0] = MU[0]\n",
        "    PMU[1] = MU[0] - data[0]\n",
        "    PML[0] = ML[0]\n",
        "    PML[1] = ML[0] - data[0]\n",
        "\n",
        "    for i in range(2, n+1):\n",
        "        PM[2 * i - 2] = M[i - 1]\n",
        "        PM[2 * i - 1] = M[i - 1] + (data[i - 2] - data[i - 1])\n",
        "        PMU[2 * i - 2] = MU[i - 1]\n",
        "        PMU[2 * i - 1] = MU[i - 1] + (data[i - 2] - data[i - 1])\n",
        "        PML[2 * i - 2] = ML[i - 1]\n",
        "        PML[2 * i - 1] = ML[i - 1] + (data[i - 2] - data[i - 1])\n",
        "\n",
        "    if ylim is None:\n",
        "        ylim = [min(min(PM), min(PMU), min(PML)), max(max(PM), max(PMU), max(PML))]\n",
        "\n",
        "    if main is None:\n",
        "        main = \"Plot of Mean Residual Life and bounds\"\n",
        "\n",
        "    if xlab is None:\n",
        "        xlab = \"Time\"\n",
        "\n",
        "    x_data = np.linspace(min(data), max(data), len(PM))\n",
        "    plt.figure()\n",
        "    plt.plot(x_data, PM, label=\"Mean Residual Life\", **kwargs)\n",
        "    plt.plot(x_data, PMU, label=\"Upper Bound\", linestyle=\"--\", **kwargs)\n",
        "    plt.plot(x_data, PML, label=\"Lower Bound\", linestyle=\"--\", linewidth=2, **kwargs)\n",
        "    plt.xlabel(xlab)\n",
        "    plt.ylabel(\"Mean Residual Life\")\n",
        "    plt.title(main)\n",
        "    plt.ylim(ylim[0], ylim[1])\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    return {\"PM\": PM, \"PMU\": PMU, \"PML\": PML}"
      ],
      "metadata": {
        "id": "qItOeV7X1Hlq"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "leukemia=[7, 429, 579, 968, 1877, 47, 440, 581, 1077, 1886, 58,\n",
        "445,  650, 1109, 2045, 74, 455, 702, 1314, 2056, 177, 468,\n",
        "715, 1334, 2260, 232, 495, 779, 1367, 2429, 273, 497, 881,\n",
        "1534, 2509, 285, 532, 900, 1712, 317,  571, 930, 1784]\n",
        "a = mrl(leukemia, .05)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "9iv12uf_5gNC",
        "outputId": "3b8d7961-be2c-4bee-a779-e40f7133c503"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from itertools import permutations\n",
        "import math\n",
        "\n",
        "def multCh7(our_matrix):\n",
        "    k = our_matrix.shape[1]\n",
        "    n = our_matrix.shape[0]\n",
        "    n_perm = math.factorial(k) ** n\n",
        "    outp = np.zeros((n, k, int(n_perm)), dtype=our_matrix.dtype)\n",
        "    sorted_rows = np.apply_along_axis(np.sort, axis=1, arr=our_matrix)\n",
        "    possible_row_arr = np.zeros((int(math.factorial(k)), k, n), dtype=our_matrix.dtype)\n",
        "\n",
        "    for i in range(n):\n",
        "        possible_row_arr[:, :, i] = np.array([list(p) for p in permutations(sorted_rows[i])])\n",
        "\n",
        "    def get_mat(index):\n",
        "        possible_mat = None\n",
        "        for j in range(n):\n",
        "            if possible_mat is None:\n",
        "                possible_mat = possible_row_arr[index[j], :, j]\n",
        "            else:\n",
        "                possible_mat = np.vstack((possible_mat, possible_row_arr[index[j], :, j]))\n",
        "        return possible_mat\n",
        "\n",
        "    index_grid = np.array([list(p) for p in np.array(np.meshgrid(*[np.arange(int(math.factorial(k))) for _ in range(n)])).T.reshape(-1, n)], dtype=int)\n",
        "\n",
        "    for i in range(int(n_perm)):\n",
        "        outp[:, :, i] = get_mat(index_grid[i])\n",
        "\n",
        "    return outp"
      ],
      "metadata": {
        "id": "etG9Kn086uZe"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "some_matrix=np.array([[1,2,7],[4,5,9]])\n",
        "a = multCh7(some_matrix)\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qp6UIK6dCqwE",
        "outputId": "55ce535e-0fd1-446e-d093-f15e32617389"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "         2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n",
              "        [2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7,\n",
              "         7, 7, 7, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2],\n",
              "        [7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 1, 1, 1,\n",
              "         1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1]],\n",
              "\n",
              "       [[4, 4, 5, 5, 9, 9, 4, 4, 5, 5, 9, 9, 4, 4, 5, 5, 9, 9, 4, 4, 5,\n",
              "         5, 9, 9, 4, 4, 5, 5, 9, 9, 4, 4, 5, 5, 9, 9],\n",
              "        [5, 9, 4, 9, 4, 5, 5, 9, 4, 9, 4, 5, 5, 9, 4, 9, 4, 5, 5, 9, 4,\n",
              "         9, 4, 5, 5, 9, 4, 9, 4, 5, 5, 9, 4, 9, 4, 5],\n",
              "        [9, 5, 9, 4, 5, 4, 9, 5, 9, 4, 5, 4, 9, 5, 9, 4, 5, 4, 9, 5, 9,\n",
              "         4, 5, 4, 9, 5, 9, 4, 5, 4, 9, 5, 9, 4, 5, 4]]])"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a[:,:,11]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WFvX8YqxC4x8",
        "outputId": "d8ca7826-2e8a-4dd9-f428-521dc882e66f"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1, 7, 2],\n",
              "       [9, 5, 4]])"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "\n",
        "def find_nbu(x):\n",
        "    n = len(x)\n",
        "    y = np.sort(x)\n",
        "    a = np.zeros((n, n, n))\n",
        "\n",
        "    for i in range(2, n):\n",
        "        for j in range(1, i):\n",
        "            for k in range(j):\n",
        "                if y[i] > y[j] + y[k]:\n",
        "                    a[i, j, k] = 1\n",
        "                elif y[i] == y[j] + y[k]:\n",
        "                    a[i, j, k] = 0.5\n",
        "                else:\n",
        "                    a[i, j, k] = 0\n",
        "\n",
        "    return np.sum(a)\n",
        "\n",
        "def p_g_mc(T, n, min_reps=100, max_reps=1000, delta=1e-3):\n",
        "    dsn = []\n",
        "    for _ in range(min_reps):\n",
        "        dsn.append(find_nbu(np.random.exponential(1, n)))\n",
        "\n",
        "    reps = min_reps\n",
        "    while reps <= max_reps:\n",
        "        p = len([x for x in dsn if x > T]) / reps\n",
        "        dsn.append(find_nbu(np.random.exponential(1, n)))\n",
        "        if abs(p - len([x for x in dsn if x > T]) / reps) <= delta:\n",
        "            return p\n",
        "        reps += 1\n",
        "\n",
        "    print(\"Warning: reached maximum reps without converging within delta\")\n",
        "    return p\n",
        "\n",
        "def p_l_mc(T, n, min_reps=100, max_reps=1000, delta=1e-3):\n",
        "    dsn = []\n",
        "    for _ in range(min_reps):\n",
        "        dsn.append(find_nbu(np.random.exponential(1, n)))\n",
        "\n",
        "    reps = min_reps\n",
        "    while reps <= max_reps:\n",
        "        p = len([x for x in dsn if x < T]) / reps\n",
        "        dsn.append(find_nbu(np.random.exponential(1, n)))\n",
        "        if abs(p - len([x for x in dsn if x < T]) / reps) <= delta:\n",
        "            return p\n",
        "        reps += 1\n",
        "\n",
        "    print(\"Warning: reached maximum reps without converging within delta\")\n",
        "    return p\n",
        "\n",
        "def nb_mc(x, alternative=\"two.sided\", exact=False, min_reps=100, max_reps=1000, delta=1e-3):\n",
        "    def char_expand(alternative, options):\n",
        "        if alternative in options:\n",
        "            return alternative\n",
        "        else:\n",
        "            raise ValueError(\"alternative must be one of: {}\".format(\", \".join(options)))\n",
        "\n",
        "    alternative = char_expand(alternative, [\"two.sided\", \"nbu\", \"nwu\"])\n",
        "\n",
        "    T = find_nbu(x)\n",
        "    n = len(x)\n",
        "\n",
        "    if n >= 9 and not exact:\n",
        "        b = T\n",
        "        e = n * (n - 1) * (n - 2) / 8\n",
        "        g = (3 / 2) * n * (n - 1) * (n - 2)\n",
        "        h = (5 / 2592) * (n - 3) * (n - 4)\n",
        "        i = (n - 3) * (7 / 432)\n",
        "        j = 1 / 48\n",
        "        k = g * (h + i + j)\n",
        "        s = np.sqrt(k)\n",
        "        T_star = (b - e) / s\n",
        "\n",
        "        if alternative == \"nbu\":\n",
        "            p = norm.cdf(T_star)\n",
        "        elif alternative == \"nwu\":\n",
        "            p = 1 - norm.cdf(T_star)\n",
        "        else:\n",
        "            p = 2 * (1 - norm.cdf(abs(T_star)))\n",
        "\n",
        "        print(f\"T*= {T_star:.2f}\\np= {p:.4f}\")\n",
        "        return {\"T\": T_star, \"prob\": p}\n",
        "\n",
        "    if alternative == \"nbu\":\n",
        "        p = p_l_mc(T, n, min_reps, max_reps, delta)\n",
        "    elif alternative == \"nwu\":\n",
        "        p = p_g_mc(T, n, min_reps, max_reps, delta)\n",
        "    else:\n",
        "        p_l = p_l_mc(T, n, min_reps, max_reps, delta)\n",
        "        p_g = p_g_mc(T, n, min_reps, max_reps, delta)\n",
        "        p = 2 * min(p_l, p_g)\n",
        "\n",
        "    print(f\"T= {T}\\np= {p:.4f}\")\n",
        "    return {\"T\": T, \"p\": p}"
      ],
      "metadata": {
        "id": "9XuW2zz3G1HF"
      },
      "execution_count": 233,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "table11 = np.array([194,15,41,29,33,181])\n",
        "nb_mc(table11, alternative=\"nbu\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UDXyiaW_HcEO",
        "outputId": "1b2f1e3f-9c25-4395-bb3e-c73e74798d2d"
      },
      "execution_count": 266,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T= 12.0\n",
            "p= 0.2079\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'T': 12.0, 'p': 0.2079207920792079}"
            ]
          },
          "metadata": {},
          "execution_count": 266
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "\n",
        "def newbet(x):\n",
        "    n = len(x)\n",
        "    y = np.sort(x)\n",
        "    a = np.zeros((n, n, n))\n",
        "\n",
        "    # Compute the NBU statistic\n",
        "    for i in range(2, n):\n",
        "        for j in range(1, i):\n",
        "            for k in range(j):\n",
        "                if y[i] > y[j] + y[k]:\n",
        "                    a[i, j, k] = 1\n",
        "                elif y[i] == y[j] + y[k]:\n",
        "                    a[i, j, k] = 0.5\n",
        "                else:\n",
        "                    a[i, j, k] = 0\n",
        "\n",
        "    b = np.sum(a)\n",
        "    e = n * (n - 1) * (n - 2) / 8\n",
        "    g = (3 / 2) * n * (n - 1) * (n - 2)\n",
        "    h = (5 / 2592) * (n - 3) * (n - 4)\n",
        "    i = (n - 3) * (7 / 432)\n",
        "    j = 1 / 48\n",
        "    k = g * (h + i + j)\n",
        "    s = np.sqrt(k)\n",
        "    p = 1 - norm.cdf(abs((b - e) / s))\n",
        "\n",
        "    return [b, (b - e) / s, p]"
      ],
      "metadata": {
        "id": "sA0gLOdoNloW"
      },
      "execution_count": 267,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "newbet(np.array([194,15,41,29,33,181]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0u1KT2piPJtY",
        "outputId": "ffc4164a-3513-42e6-ac5a-17afab5f5b60"
      },
      "execution_count": 268,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[12.0, -0.7855844048495727, 0.2160555019212741]"
            ]
          },
          "metadata": {},
          "execution_count": 268
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def owa(x, y):\n",
        "    C5 = []\n",
        "    diff = y - x\n",
        "    for i in range(len(x)):\n",
        "        for j in range(i, len(y)):\n",
        "            C5.append((diff[i] + diff[j]) / 2)\n",
        "\n",
        "    owa = sorted(C5)\n",
        "    h_l = np.median(owa)\n",
        "    return {\"owa\": owa, \"h.l\": h_l}"
      ],
      "metadata": {
        "id": "ss10WwddPOZd"
      },
      "execution_count": 269,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.array([1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30])\n",
        "y=np.array([0.878, 0.647, 0.598, 2.050, 1.060, 1.290, 1.060, 3.140, 1.290])\n",
        "owa(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WwPtWn6IPrEP",
        "outputId": "f1ae79f9-e08c-44db-b0d1-30f802a2e851"
      },
      "execution_count": 270,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'owa': [-1.0220000000000002,\n",
              "  -0.9870000000000001,\n",
              "  -0.9520000000000001,\n",
              "  -0.8210000000000001,\n",
              "  -0.806,\n",
              "  -0.786,\n",
              "  -0.7709999999999999,\n",
              "  -0.7560000000000001,\n",
              "  -0.7260000000000002,\n",
              "  -0.7210000000000001,\n",
              "  -0.6910000000000001,\n",
              "  -0.6199999999999999,\n",
              "  -0.6049999999999999,\n",
              "  -0.5899999999999999,\n",
              "  -0.5549999999999999,\n",
              "  -0.5399999999999999,\n",
              "  -0.525,\n",
              "  -0.5160000000000001,\n",
              "  -0.51,\n",
              "  -0.49,\n",
              "  -0.48100000000000004,\n",
              "  -0.4710000000000001,\n",
              "  -0.4600000000000001,\n",
              "  -0.4375000000000001,\n",
              "  -0.436,\n",
              "  -0.43000000000000016,\n",
              "  -0.4025,\n",
              "  -0.31499999999999995,\n",
              "  -0.29999999999999993,\n",
              "  -0.2699999999999999,\n",
              "  -0.2549999999999999,\n",
              "  -0.25,\n",
              "  -0.23649999999999993,\n",
              "  -0.22149999999999992,\n",
              "  -0.22000000000000008,\n",
              "  -0.20499999999999996,\n",
              "  -0.17500000000000004,\n",
              "  -0.17149999999999999,\n",
              "  -0.14150000000000007,\n",
              "  -0.010000000000000009,\n",
              "  0.03500000000000003,\n",
              "  0.0685,\n",
              "  0.08000000000000007,\n",
              "  0.11350000000000005,\n",
              "  0.14700000000000002],\n",
              " 'h.l': -0.4600000000000001}"
            ]
          },
          "metadata": {},
          "execution_count": 270
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import ansari\n",
        "from math import comb\n",
        "from itertools import combinations\n",
        "\n",
        "def pAnsBrad(x, y=None, g=None, method=None, n_mc=10000):\n",
        "    outp = {}\n",
        "\n",
        "    if isinstance(x, list):\n",
        "        if len(x) < 2:\n",
        "            raise ValueError(\"'x' must be a list with at least 2 elements\")\n",
        "        y = x[1]\n",
        "        x = x[0]\n",
        "    else:\n",
        "        if np.any(np.isnan(y)):\n",
        "            k = len(np.unique(g))\n",
        "            if len(x) != len(g):\n",
        "                raise ValueError(\"'x' and 'g' must have the same length\")\n",
        "            if k < 2:\n",
        "                raise ValueError(\"all observations are in the same group\")\n",
        "            y = x[g == 1]\n",
        "            x = x[g == 0]\n",
        "\n",
        "    outp[\"m\"] = len(x)\n",
        "    outp[\"n\"] = len(y)\n",
        "    outp[\"ties\"] = (len(np.concatenate((x, y))) != len(np.unique(np.concatenate((x, y)))))\n",
        "    outp[\"extra\"] = None\n",
        "    even = (outp[\"m\"] + outp[\"n\"] + 1) % 2\n",
        "\n",
        "    outp[\"stat_name\"] = \"Ansari-Bradley C\"\n",
        "\n",
        "    if method is None:\n",
        "        if outp[\"ties\"]:\n",
        "            if comb(outp[\"m\"] + outp[\"n\"], outp[\"n\"]) <= 10000:\n",
        "                method = \"Exact\"\n",
        "            else:\n",
        "                method = \"Monte Carlo\"\n",
        "        else:\n",
        "            if outp[\"m\"] + outp[\"n\"] <= 200:\n",
        "                method = \"Exact\"\n",
        "            else:\n",
        "                method = \"Asymptotic\"\n",
        "\n",
        "    outp[\"method\"] = method\n",
        "\n",
        "    if not outp[\"ties\"]:\n",
        "        if outp[\"method\"] == \"Monte Carlo\":\n",
        "            print(\"The exact computation will work for large data without ties, so Exact methods are used rather than Monte Carlo.\")\n",
        "            outp[\"method\"] = \"Exact\"\n",
        "\n",
        "        if outp[\"method\"] == \"Exact\":\n",
        "            tmp = ansari(y, x, alternative=\"less\", exact=True)\n",
        "            tmp2 = ansari(y, x, exact=True)\n",
        "        elif outp[\"method\"] == \"Asymptotic\":\n",
        "            tmp = ansari(y, x, alternative=\"less\", exact=False)\n",
        "            tmp2 = ansari(y, x, exact=False)\n",
        "\n",
        "        outp[\"obs_stat\"] = float(tmp.statistic)\n",
        "        outp[\"p_val\"] = tmp.pvalue\n",
        "        outp[\"two_sided\"] = tmp2.pvalue\n",
        "    else:\n",
        "        if outp[\"method\"] != \"Asymptotic\":\n",
        "            our_data = np.vstack((np.concatenate((x, y)), np.concatenate((np.ones(len(x)), np.zeros(len(y))))))\n",
        "            sorted_data = our_data[0, np.argsort(our_data[0])]\n",
        "            x_labels = our_data[1, np.argsort(our_data[0])]\n",
        "\n",
        "            N = len(sorted_data)\n",
        "            med = (N + 1) // 2\n",
        "            if N % 2 == 0:\n",
        "                no_ties = np.concatenate((np.arange(1, med + 1), np.arange(med, 0, -1)))\n",
        "            else:\n",
        "                no_ties = np.concatenate((np.arange(1, med + 1), np.arange(med - 1, 0, -1)))\n",
        "\n",
        "            obs_group = np.zeros(N, dtype=int)\n",
        "            group_num = 1\n",
        "\n",
        "            for i in range(N):\n",
        "                if obs_group[i] == 0:\n",
        "                    obs_group[i] = group_num\n",
        "                    for j in range(i, N):\n",
        "                        if sorted_data[i] == sorted_data[j]:\n",
        "                            obs_group[j] = obs_group[i]\n",
        "                    group_num += 1\n",
        "\n",
        "            group_ranks = [np.mean(no_ties[obs_group == i]) for i in np.unique(obs_group)]\n",
        "            tied_ranks = np.zeros(N)\n",
        "            for i, rank in enumerate(group_ranks):\n",
        "                tied_ranks[obs_group == i+1] = rank\n",
        "\n",
        "            assigned_scores = tied_ranks\n",
        "            outp[\"obs_stat\"] = sum(tied_ranks[x_labels == 0])\n",
        "\n",
        "            if outp[\"method\"] == \"Exact\":\n",
        "                possible_orders = list(combinations(range(outp[\"m\"] + outp[\"n\"]), outp[\"n\"]))\n",
        "                C_stats = [sum(assigned_scores[list(order)]) for order in possible_orders]\n",
        "                C_tab = np.unique(C_stats, return_counts=True)\n",
        "                C_vals = np.round(C_tab[0], 5)\n",
        "                C_probs = C_tab[1] / np.sum(C_tab[1])\n",
        "                outp[\"p_val\"] = np.sum(C_probs[C_vals >= np.round(outp[\"obs_stat\"], 5)])\n",
        "                outp[\"two_sided\"] = 2 * min(outp[\"p_val\"], 1 - outp[\"p_val\"])\n",
        "            elif outp[\"method\"] == \"Monte Carlo\":\n",
        "                outp[\"n_mc\"] = n_mc\n",
        "                outp[\"p_val\"] = 0\n",
        "                for _ in range(n_mc):\n",
        "                    if sum(np.random.choice(assigned_scores, outp[\"n\"], replace=False)) >= outp[\"obs_stat\"]:\n",
        "                        outp[\"p_val\"] += 1 / n_mc\n",
        "                outp[\"two_sided\"] = 2 * min(outp[\"p_val\"], 1 - outp[\"p_val\"])\n",
        "            elif outp[\"method\"] == \"Asymptotic\":\n",
        "                import warnings\n",
        "                with warnings.catch_warnings():\n",
        "                    warnings.simplefilter(\"ignore\")\n",
        "                    tmp = ansari(y, x, alternative=\"greater\", exact=False)\n",
        "                    tmp2 = ansari(y, x, exact=False)\n",
        "                outp[\"obs_stat\"] = float(tmp.statistic)\n",
        "                outp[\"p_val\"] = tmp.pvalue\n",
        "                outp[\"two_sided\"] = tmp2.pvalue\n",
        "\n",
        "            if not even and outp[\"method\"] == \"Exact\":\n",
        "                outp[\"extra\"] = \"(N is odd so the null distribution is not symmetric and so the two-sided p-value is approximate.)\"\n",
        "\n",
        "            return outp"
      ],
      "metadata": {
        "id": "rV_TlL55Pwd6"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pAnsBrad(np.array([111, 107, 100, 99, 102, 106, 109, 108, 104, 99, 101, 96, 97, 102, 107,\n",
        "113, 116, 113, 110, 98]), np.array([107, 108, 106, 98, 105, 103, 110, 105, 104, 100, 96, 108, 103, 104, 114, 114,\n",
        "113, 108, 106, 99]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OMes0NvVSwby",
        "outputId": "bb735052-dd48-465d-b831-3342eb6ce968"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'m': 20,\n",
              " 'n': 20,\n",
              " 'ties': True,\n",
              " 'extra': None,\n",
              " 'stat_name': 'Ansari-Bradley C',\n",
              " 'method': 'Monte Carlo',\n",
              " 'obs_stat': 234.5,\n",
              " 'n_mc': 10000,\n",
              " 'p_val': 0.09450000000000168,\n",
              " 'two_sided': 0.18900000000000336}"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import beta\n",
        "\n",
        "def pBohnWolfe(x, y, k, q, c, d, method=\"Monte Carlo\", n_mc=10000):\n",
        "    outp = {}\n",
        "    outp[\"m\"] = len(x)\n",
        "    outp[\"n\"] = len(y)\n",
        "    outp[\"n_mc\"] = n_mc\n",
        "    if k * c != outp[\"m\"]:\n",
        "        print(\"Warning: Check k*c is the same as the length of x\")\n",
        "    if q * d != outp[\"n\"]:\n",
        "        print(\"Warning: Check q*d is the same as the length of y\")\n",
        "    outp[\"stat_name\"] = \"Bohn-Wolfe U\"\n",
        "\n",
        "    outp[\"method\"] = method\n",
        "\n",
        "    if outp[\"method\"] == \"Asymptotic\":\n",
        "        print(\"Warning: The Asymptotic distribution is not yet supported in this version.\")\n",
        "    if outp[\"method\"] == \"Exact\":\n",
        "        print(\"Warning: The Exact distribution is not yet supported in this version.\")\n",
        "    outp[\"method\"] = \"Monte Carlo\"\n",
        "\n",
        "    mc_dist = np.zeros(n_mc)\n",
        "\n",
        "    outp[\"obs_stat\"] = 0\n",
        "    for j in range(q * d):\n",
        "        outp[\"obs_stat\"] += np.sum(x < y[j])\n",
        "\n",
        "    for iter in range(n_mc):\n",
        "        sample = []\n",
        "        for j in range(c):\n",
        "            for i in range(1, k + 1):\n",
        "                sample.append(beta.rvs(i, k + 1 - i, size=1)[0])\n",
        "        for j in range(d):\n",
        "            for i in range(1, q + 1):\n",
        "                sample.append(beta.rvs(i, q + 1 - i, size=1)[0])\n",
        "        stat = 0\n",
        "        for j in range(k * c, k * c + q * d):\n",
        "            stat += np.sum(sample[:k * c] < sample[j])\n",
        "        mc_dist[iter] = stat\n",
        "\n",
        "    mc_vals, mc_probs = np.unique(mc_dist, return_counts=True)\n",
        "    mc_probs = mc_probs / n_mc\n",
        "\n",
        "    outp[\"p_val\"] = np.sum(mc_probs[mc_vals >= outp[\"obs_stat\"]])\n",
        "\n",
        "    return outp"
      ],
      "metadata": {
        "id": "0d12OVNqYsH3"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##Hollander, Wolfe, Chicken Example 15.4 Body Mass Index:\n",
        "male=np.array([18.0, 20.5, 21.3, 21.3, 22.3, 23.8, 23.8, 24.6, 25.0, 25.2, 25.3, 25.9, 26.1, 27.0,\n",
        "27.4, 27.4, 28.4, 29.4, 29.6, 32.8])\n",
        "female=np.array([17.2, 17.8, 19.9, 20.0, 21.7, 22.0, 22.3, 23.1, 23.9, 25.8, 27.1, 29.6, 30.1, 30.3,\n",
        "30.7, 31.1, 35.2, 35.6, 38.1, 42.5])\n",
        "\n",
        "pBohnWolfe(male,female,4,4,5,5)\n",
        "##To use more Monte Carlo samples:\n",
        "#pBohnWolfe(male,female,4,4,5,5,n.mc=100000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzentSURaK00",
        "outputId": "f3ef4cbd-514a-4dea-c72e-6591feec8cab"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'m': 20,\n",
              " 'n': 20,\n",
              " 'n_mc': 10000,\n",
              " 'stat_name': 'Bohn-Wolfe U',\n",
              " 'method': 'Monte Carlo',\n",
              " 'obs_stat': 225,\n",
              " 'p_val': 0.14629999999999993}"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from math import factorial\n",
        "from itertools import permutations\n",
        "# import multCh7\n",
        "\n",
        "\n",
        "def pDurSkiMa(x, b=None, trt=None, method=None, n_mc=10000):\n",
        "    outp = {}\n",
        "    outp[\"stat_name\"] = \"Durbin, Skillings-Mack D\"\n",
        "    outp[\"n_mc\"] = n_mc\n",
        "\n",
        "    ties = len(np.unique(np.array(x, dtype=float))) != len(x)\n",
        "\n",
        "    if isinstance(x, np.ndarray) and len(x.shape) == 2:\n",
        "        outp[\"n\"] = n = x.shape[0]\n",
        "        outp[\"k\"] = k = x.shape[1]\n",
        "    else:\n",
        "        if (len(x) != len(b)) or (len(x) != len(trt)):\n",
        "            raise ValueError(\"'x', 'b', and 'trt' must have the same length\")\n",
        "\n",
        "        outp[\"n\"] = n = len(np.unique(b))\n",
        "        outp[\"k\"] = k = len(np.unique(trt))\n",
        "        x_vec = x\n",
        "        num_obs = len(x_vec)\n",
        "        b_ind = np.array([int(f) for f in np.unique(b, return_inverse=True)[1]]) + 1\n",
        "        trt_ind = np.array([int(f) for f in np.unique(trt, return_inverse=True)[1]]) + 1\n",
        "\n",
        "        x = np.zeros((outp[\"n\"], outp[\"k\"]))\n",
        "        x[:] = np.nan\n",
        "        for i in range(num_obs):\n",
        "            x[b_ind[i] - 1, trt_ind[i] - 1] = x_vec[i]\n",
        "\n",
        "    if len(np.unique(np.sum(~np.isnan(x), axis=1))) != 1:\n",
        "        raise ValueError(\"Must be same number of observations per block\")\n",
        "    if len(np.unique(np.sum(~np.isnan(x), axis=0))) != 1:\n",
        "        raise ValueError(\"Must be same number of observations per treatment\")\n",
        "\n",
        "    outp[\"ss\"] = s = np.sum(~np.isnan(x[0]))\n",
        "    outp[\"pp\"] = p = np.sum(~np.isnan(x[:, 0]))\n",
        "    outp[\"lambda\"] = outp[\"pp\"] * (outp[\"ss\"] - 1) / (outp[\"k\"] - 1)\n",
        "\n",
        "    outp[\"obs_mat\"] = np.where(~np.isnan(x), 1, 0)\n",
        "    outp[\"x\"] = x\n",
        "\n",
        "    if method is None:\n",
        "        if factorial(outp[\"ss\"]) ** outp[\"n\"] <= 10000:\n",
        "            method = \"Exact\"\n",
        "        else:\n",
        "            method = \"Monte Carlo\"\n",
        "\n",
        "    outp[\"method\"] = method\n",
        "\n",
        "    possible_ranks = np.apply_along_axis(lambda y: rankdata(y), 1, x[~np.isnan(x)].reshape((-1, outp[\"ss\"])))\n",
        "\n",
        "    def DSK_stat(obs_data):\n",
        "        tmp_mat = outp[\"obs_mat\"].copy()\n",
        "        for i in range(outp[\"n\"]):\n",
        "            tmp_mat[i, tmp_mat[i] != 0] = obs_data[i]\n",
        "        Rj = np.sum(tmp_mat, axis=0)\n",
        "        D_stat = 12 / (outp[\"lambda\"] * outp[\"k\"] * (outp[\"ss\"] + 1)) * np.sum((Rj - outp[\"pp\"] * (outp[\"ss\"] + 1) / 2) ** 2)\n",
        "        return D_stat\n",
        "\n",
        "    outp[\"obs_stat\"] = DSK_stat(possible_ranks)\n",
        "\n",
        "    if outp[\"method\"] == \"Exact\":\n",
        "        possible_perm = multCh7(possible_ranks)\n",
        "        exact_dist = np.apply_along_axis(DSK_stat, axis=1, arr=possible_perm)\n",
        "        outp[\"p_val\"] = np.mean(exact_dist >= outp[\"obs_stat\"])\n",
        "    elif outp[\"method\"] == \"Monte Carlo\":\n",
        "        mc_perm = np.zeros((outp[\"n\"], outp[\"ss\"]))\n",
        "        mc_stats = np.zeros(outp[\"n_mc\"])\n",
        "        for i in range(outp[\"n_mc\"]):\n",
        "            for j in range(outp[\"n\"]):\n",
        "                mc_perm[j] = possible_ranks[j, np.random.permutation(outp[\"ss\"])]\n",
        "            mc_stats[i] = DSK_stat(mc_perm)\n",
        "        outp[\"p_val\"] = np.mean(mc_stats >= outp[\"obs_stat\"])\n",
        "    elif outp[\"method\"] == \"Asymptotic\":\n",
        "        from scipy.stats import chi2\n",
        "        outp[\"p_val\"] = 1 - chi2.cdf(outp[\"obs_stat\"], outp[\"k\"] - 1)\n",
        "\n",
        "    return outp"
      ],
      "metadata": {
        "id": "9XmXA1IvaTzn"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.array([0.465,.602,.423,.343,.652,.536,.873,.875,1.142,.396,.325,.609,.634,.409,.417,.987,.989,\n",
        ".931,.330,.426,.309])\n",
        "b=np.array([1,2,4,1,5,6,2,3,5,1,3,7,2,6,7,4,5,7,3,4,6])\n",
        "trt=[\"A\"]*3+[\"B\"]*3+[\"C\"]*3+[\"D\"]*3+[\"E\"]*3+[\"F\"]*3+[\"g\"]*3\n",
        "\n",
        "pDurSkiMa(x,b,trt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1gPS-4sNeZBk",
        "outputId": "3926004d-79d1-42d6-f763-63252974fda4"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'stat_name': 'Durbin, Skillings-Mack D',\n",
              " 'n_mc': 10000,\n",
              " 'n': 7,\n",
              " 'k': 7,\n",
              " 'ss': 3,\n",
              " 'pp': 3,\n",
              " 'lambda': 1.0,\n",
              " 'obs_mat': array([[1, 1, 0, 1, 0, 0, 0],\n",
              "        [1, 0, 1, 0, 1, 0, 0],\n",
              "        [0, 0, 1, 1, 0, 0, 1],\n",
              "        [1, 0, 0, 0, 0, 1, 1],\n",
              "        [0, 1, 1, 0, 0, 1, 0],\n",
              "        [0, 1, 0, 0, 1, 0, 1],\n",
              "        [0, 0, 0, 1, 1, 1, 0]]),\n",
              " 'x': array([[0.465, 0.343,   nan, 0.396,   nan,   nan,   nan],\n",
              "        [0.602,   nan, 0.873,   nan, 0.634,   nan,   nan],\n",
              "        [  nan,   nan, 0.875, 0.325,   nan,   nan, 0.33 ],\n",
              "        [0.423,   nan,   nan,   nan,   nan, 0.987, 0.426],\n",
              "        [  nan, 0.652, 1.142,   nan,   nan, 0.989,   nan],\n",
              "        [  nan, 0.536,   nan,   nan, 0.409,   nan, 0.309],\n",
              "        [  nan,   nan,   nan, 0.609, 0.417, 0.931,   nan]]),\n",
              " 'method': 'Monte Carlo',\n",
              " 'obs_stat': 7.7142857142857135,\n",
              " 'p_val': 0.3106}"
            ]
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gwEPcYUX3hwp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}